server:
  port: 6001

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://127.0.0.1:7001/rsa/publicKey  #配置RSA的公钥访问地址,这个用来对token进行加解密
  application:
    name: gateway-server # 应用名
    redis:
      host: localhost # Redis服务器地址
      port: 6379 # Redis服务器连接端口
      # Redis 服务器连接密码（默认为空），注释放到上面来，不然控制台可能会一直打印日志
      password:
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848 # 注册中心地址
    gateway:
      discovery:
        locator:
          # true 开启以服务名称调用目标服务
          enabled: true
      routes:
        # 路由唯一标识
        - id: auth
          # 目标微服务名称 lb://目标服务名
          uri: lb://auth-server
          # 断言，路由条件
          predicates:
            # 匹配访问路由，以 /auth 开头的请求代理到
            - Path=/auth/**
          filters:
            #去掉auth
            - StripPrefix=1
            # 开启限流
            - name: RequestRateLimiter
              args:
                # 限制过滤器bean名称
                key-resolver: '#{@uriKeyResolver}'
                # 希望每个用户每秒执行多少个请求。令牌桶填充的速率
                redis-rate-limiter.replenishRate: 2
                # 允许用户在一秒种内完成最大请求数。令牌桶最多可以容纳的令牌数量 。如果设置为0将阻止所有请求
                redis-rate-limiter.burstCapacity: 4
      # 路由唯一标识
        - id: system
          # 目标微服务名称 lb://目标服务名
          uri: lb://system-server
          # 断言，路由条件
          predicates:
          # 匹配访问路由，以 /auth 开头的请求代理到
          - Path=/system/**
          filters:
          #去掉system
          - StripPrefix=1
          # 开启限流
          - name: RequestRateLimiter
            args:
              # 限制过滤器bean名称
              key-resolver: '#{@uriKeyResolver}'
              # 希望每个用户每秒执行多少个请求。令牌桶填充的速率
              redis-rate-limiter.replenishRate: 2
              # 允许用户在一秒种内完成最大请求数。令牌桶最多可以容纳的令牌数量 。如果设置为0将阻止所有请求
              redis-rate-limiter.burstCapacity: 4
      # 路由唯一标识
        - id: monitor
          # 目标微服务名称 lb://目标服务名
          uri: lb://monitor
          # 断言，路由条件
          predicates:
          # 匹配访问路由，以 /auth 开头的请求代理到
          - Path=/monitor/**
          filters:
          # 开启限流
          - name: RequestRateLimiter
            args:
              # 限制过滤器bean名称
              key-resolver: '#{@uriKeyResolver}'
              # 希望每个用户每秒执行多少个请求。令牌桶填充的速率
              redis-rate-limiter.replenishRate: 2
              # 允许用户在一秒种内完成最大请求数。令牌桶最多可以容纳的令牌数量 。如果设置为0将阻止所有请求
              redis-rate-limiter.burstCapacity: 4
      # 路由唯一标识
        - id: search
          # 目标微服务名称 lb://目标服务名
          uri: lb://search
          # 断言，路由条件
          predicates:
          # 匹配访问路由，以 /auth 开头的请求代理到
          - Path=/search/**
          filters:
          # 开启限流
          - name: RequestRateLimiter
            args:
              # 限制过滤器bean名称
              key-resolver: '#{@uriKeyResolver}'
              # 希望每个用户每秒执行多少个请求。令牌桶填充的速率
              redis-rate-limiter.replenishRate: 2
              # 允许用户在一秒种内完成最大请求数。令牌桶最多可以容纳的令牌数量 。如果设置为0将阻止所有请求
              redis-rate-limiter.burstCapacity: 4
      # 路由唯一标识
        - id: design
          # 目标微服务名称 lb://目标服务名
          uri: lb://design
          # 断言，路由条件
          predicates:
          # 匹配访问路由，以 /auth 开头的请求代理到
          - Path=/design/**
          filters:
          # 开启限流
          - name: RequestRateLimiter
            args:
              # 限制过滤器bean名称
              key-resolver: '#{@uriKeyResolver}'
              # 希望每个用户每秒执行多少个请求。令牌桶填充的速率
              redis-rate-limiter.replenishRate: 2
              # 允许用户在一秒种内完成最大请求数。令牌桶最多可以容纳的令牌数量 。如果设置为0将阻止所有请求
              redis-rate-limiter.burstCapacity: 4

secure:
  ignore:
    urls: #配置白名单路径
    - "/actuator/**"
    - "/auth/oauth/token"
    - "/auth/oauth/token"
    - "/auth/oauth/authorize"
    - "/auth/loginPage"
    - "/auth/login"
    - "/auth/manual/oauth/token"
    - "/system/sys-user/login"
    - "/monitor/**"
    - "/design/**"
